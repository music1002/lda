from sklearn.datasets import load_irisfrom sklearn.model_selection import train_test_splitfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysisfrom sklearn.tree import DecisionTreeClassifier import matplotlib.pyplot as pltiris = load_iris()X=iris.datay=iris.targetfeatures=iris.feature_namestarget_names=iris.target_namescolors=["navy","red","blue"]X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)tree = DecisionTreeClassifier(criterion="entropy")tree.fit(X_train,y_train)acc=tree.score(X_test,y_test)fig = plt.figure(figsize=(8,8))ax = fig.add_subplot(111, projection='3d')plt.title("W/o LDA, Decision Tree\nTest accuracy = {:.2f}".format(acc))for color, i, target_name in zip(colors, [0, 1, 2], target_names):    ax.scatter(X[y == i, 0], X[y == i, 1],X[y == i, 2], color = color,                label = target_name)plt.legend(loc='best')plt.axis("off")plt.show()    lda=LinearDiscriminantAnalysis(n_components=2)lda.fit(X_train,y_train)tree.fit(lda.transform(X_train),y_train)acc2=tree.score(lda.transform(X_test),y_test)X_trans=lda.transform(X)plt.figure(figsize=(12,5))for color, i, target_name in zip(colors, [0, 1, 2], target_names):    plt.scatter(X_trans[y == i, 0], X_trans[y == i, 1], alpha=.8, color=color,                label=target_name)plt.legend(loc='best')plt.axis("off")plt.title("LDA, Decision Tree\nTest accuracy = {:.2f}".format(acc2))plt.show()